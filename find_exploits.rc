# [USAGE]
# "msfconsole -r find_exploits.rc [TARGET_IP]"
# [EXAMPLE]
# msfconsole -r find_exploits.rc 192.168.64.4

# TODO: 
# Add few code snippets in the steps when explaining what script does
# Add SS of Metasploitable 
# Explain more about outputs and significance


<ruby>
    def check_framework()
        if !framework.db.active
            print_error("[ERROR] Database not connected to postgresql. Exiting...")
            run_single("exit -y")
        else
            print_status "Framework is connected to postgresql. Continuing the script!"
        end
    end

    def create_workspace()
        # wipe DB by deleting the workspace then adding it again
        run_single("workspace -d 321") 
        run_single("workspace -a 321") 
    end

    def init_args()
        args = {}
        
        args[:target_ip]    = ARGV.shift || ''

        if args[:target_ip].empty?
            run_single("exit")
            raise ArgumentError, "Missing a target IP" 
        end

        return args
    end

    def check_alive_host()
        # check if host is up in the scan. if not, exit script
        if framework.db.hosts.empty?
            run_single("exit -y")
            raise "That host was not up, find exploits not available. Exiting script..."
        else 
            print_status("Host is alive. Moving on...")
        end
    end

    def collect_cves()
        print_status "Extracting vulnerabilities and corresponding ports..."
        vulns = []

        framework.db.services.each do |service|
            vulns_for_service = { host: service.host.address, port: service.port, service: service.name, name: "", cves: [] }

            service.vulns.each do |vuln|
                vuln.refs.each do |ref|
                    if ref.name =~ /^CVE/
                        vulns_for_service[:cves] << ref.name
                        vulns_for_service[:name] = vuln.name
                    end
                end
            end

            # Add the collected vulnerabilities for this service if there are any CVEs
            vulns << vulns_for_service unless vulns_for_service[:cves].empty?
        end
        print_line ""
        vulns
    end

    def find_exploits(vulns)
        # Add exploits corresponding to the extracted vulnerabilities to the array
        if vulns.any?
        matched_modules = []
        vulns.each do |vuln|
            print_status("Trying to find exploit for vuln: '#{vuln[:name]}', port: '#{vuln[:host]}:#{vuln[:port]}', service: '#{vuln[:service]}'")
            found_exploit = false

            framework.exploits.each_module do |name, mod|
                mod_instance = framework.modules.create(name)
                if mod_instance && mod_instance.references 
                    mod_instance.references.each do |ref|
                        if vuln[:cves].any? { |cve| ref.site.include?(cve) } && !matched_modules.any? { |exploit| exploit[:module] == name}
                            print_status("\tFound exploit module #{name} for CVE: #{ref}")
                            print_status("\t#{mod_instance.description}")

                            matched_modules << { module: name, host: vuln[:host], port: vuln[:port], os: vuln[:os] }
                            found_exploit = true
                            # break
                        end
                    end
                    # break if found_exploit
                end
            end

            if !found_exploit
                print_status("No exploit found for #{vuln[:host]}:#{vuln[:port]}\n")
            end
        end
        else
            print_status "No vulnerabilities found for services."
        end

        if !matched_modules.empty?
            print_status "Found a total of #{matched_modules.length} exploits for #{$target_ip}"
        else 
            print_status "Found no exploits for #{framework.db.hosts[0]}"
        end
    end

    #################### function calls ####################
    start_time = Time.now
    check_framework
    create_workspace
    args = init_args
    $target_ip = args[:target_ip]
    run_single("db_nmap -sV --script vulners -T4 -n #{$target_ip}")
    check_alive_host
    vulns = collect_cves
    print_line "VULNS: #{vulns}"
    find_exploits(vulns)
    end_time = Time.now
    print_status "Searching for relevant exploits completed in #{(end_time - start_time).round(0)} seconds."
</ruby>